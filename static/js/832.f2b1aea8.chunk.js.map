{"version":3,"file":"static/js/832.f2b1aea8.chunk.js","mappings":"yNAEaA,EAAaC,EAAAA,EAAAA,GAAH,kNAYVC,EAAaD,EAAAA,EAAAA,GAAH,yPAUVE,EAAQF,EAAAA,EAAAA,GAAH,wFAMLG,EAAOH,EAAAA,EAAAA,EAAH,2LAUJI,EAAWJ,EAAAA,EAAAA,IAAH,wF,6BCgBrB,EA/Ca,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAIF,EAGJ,KACEG,EAAAA,EAAAA,IAAYN,GAASO,KAAKH,GAC1B,MAAOI,GACPC,QAAQC,IAAIF,MAEb,CAACR,EAASG,KAGX,iCACE,SAACT,EAAD,UACGS,GACCA,EAAOQ,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACtC,OACE,UAACnB,EAAD,WACoB,OAAjBmB,GACC,SAAChB,EAAD,CACEiB,IAAG,UA1BR,8BA0BQ,eAAoBD,GACvBE,IAAKJ,EACLK,QAAQ,UAGV,SAACnB,EAAD,CACEoB,OAAO,MACPH,IAAKI,EACLH,IAAKJ,EACLK,QAAQ,UAGZ,SAACrB,EAAD,UAAQgB,KACR,SAACf,EAAD,UAAOgB,MAhBQF,SAqBzB,SAACS,EAAA,EAAD,CAAWC,MAAOnB,S,iGCjDXoB,E,QAAS5B,EAAAA,OAAH,ia,SC4CnB,EAzCkB,SAAC,GAAe,IAAb2B,EAAY,EAAZA,MACnB,GAA8BpB,EAAAA,EAAAA,WAAS,GAAvC,eAAOsB,EAAP,KAAgBC,EAAhB,KAEMC,EAAmB,WACnBC,OAAOC,YAAc,IACvBH,GAAW,GAEXA,GAAW,IAmBf,OAXApB,EAAAA,EAAAA,YAAU,WAMR,OAFAsB,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,MAEtC,CAACJ,KAGF,8BACGE,GACC,SAACD,EAAD,CAAQQ,KAAK,SAASC,QAlBV,WAChBL,OAAOM,SAAS,CAAEC,IAAK,EAAGC,SAAU,YAiBhC,UACE,SAAC,MAAD,CAAyBC,KAAK,OAAOC,MAAM,uBAE3C,S,yMCjCJC,EAAkB,qCAElBC,EAAM,mCAECC,EAAW,mCAAG,WAAMC,GAAN,uFACFC,IAAAA,IAAA,UAPR,kDAOQ,oBAAiCH,EAAjC,iBAA6CE,IAD3C,cACnBE,EADmB,yBAElBA,EAASC,MAFS,2CAAH,sDAKXC,EAAS,mCAAG,WAAOvB,EAAOmB,GAAd,uFACAC,IAAAA,IAAA,UAXN,4CAWM,oBACIH,EADJ,iCACgCjB,EADhC,iBAC8CmB,EAD9C,yBADA,cACjBE,EADiB,yBAIhBA,EAASC,KAAKE,SAJE,2CAAH,wDAOTC,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,IAAAA,IAAA,6CACiBM,EADjB,oBAC+BT,EAD/B,qBADQ,cACzBI,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBtC,EAAW,mCAAG,WAAM0C,GAAN,uFACFN,IAAAA,IAAA,UAClBJ,EADkB,YACCU,EADD,4BACuBT,EADvB,qBADE,cACnBI,EADmB,yBAIlBA,EAASC,KAAKK,MAJI,2CAAH,sDAOXC,EAAY,mCAAG,WAAMF,GAAN,uFACHN,IAAAA,IAAA,UAClBJ,EADkB,YACCU,EADD,4BACuBT,EADvB,2BADG,cACpBI,EADoB,yBAInBA,EAASC,KAAKE,SAJK,2CAAH,uD","sources":["Pages/Cast/Cast.styled.jsx","Pages/Cast/Cast.jsx","components/ScrollTop/Scroll.styled.jsx","components/ScrollTop/ScrollTop.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ActorsList = styled.ul`\n  display: grid;\n  width: 1280px;\n  grid-template-columns: repeat(auto-fill, 200px);\n  justify-content: center;\n  align-content: center;\n\n  grid-gap: 15px;\n\n  list-style: none;\n`;\n\nexport const ActorsCard = styled.li`\n  display: grid;\n  row-gap: 5px;\n  background-color: rgba(223, 217, 217, 0.8);\n\n  padding-bottom: 10px;\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3), 4px 4px 4px rgba(0, 0, 0, 0.3),\n    1px 4px 6px rgba(0, 0, 0, 0.3);\n`;\n\nexport const Actor = styled.h3`\n  font-size: 16px;\n  font-weight: 700;\n  text-align: center;\n`;\n\nexport const Role = styled.p`\n  display: inline-block;\n  padding-left: 5px;\n  padding-right: 5px;\n  font-size: 12px;\n  font-weight: 400;\n  text-align: center;\n  color: rgb(255, 107, 8);\n`;\n\nexport const ActorImg = styled.img`\n  display: block;\n  margin: 0;\n  padding: 0;\n  width: 100%;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchActors } from '../../services/api';\nimport { ActorsList, ActorsCard, Actor, Role, ActorImg } from './Cast.styled';\nimport ScrollTop from '../../components/ScrollTop/ScrollTop';\nimport Oscar from '../../images/oscar-award.jpg';\n\nlet imageURL = 'https://image.tmdb.org/t/p/';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n\n  useEffect(() => {\n    if (actors) {\n      return;\n    }\n    try {\n      fetchActors(movieId).then(setActors);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId, actors]);\n\n  return (\n    <>\n      <ActorsList>\n        {actors &&\n          actors.map(({ cast_id, name, character, profile_path }) => {\n            return (\n              <ActorsCard key={cast_id}>\n                {profile_path !== null ? (\n                  <ActorImg\n                    src={`${imageURL}w342${profile_path}`}\n                    alt={name}\n                    loading=\"lazy\"\n                  />\n                ) : (\n                  <ActorImg\n                    height=\"300\"\n                    src={Oscar}\n                    alt={name}\n                    loading=\"lazy\"\n                  />\n                )}\n                <Actor>{name}</Actor>\n                <Role>{character}</Role>\n              </ActorsCard>\n            );\n          })}\n      </ActorsList>\n      <ScrollTop query={actors} />\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  position: fixed;\n  bottom: 5px;\n  right: 5px;\n  width: 50px;\n  height: 50px;\n  border: none;\n  outline: none;\n  border-radius: 50%;\n  background-color: transparent;\n\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    fill 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: rgb(255, 107, 8);\n    svg {\n      fill: #ffffff;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { BsFillArrowUpCircleFill } from 'react-icons/bs';\nimport { Button } from './Scroll.styled';\n\nconst ScrollTop = ({ query }) => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisibility = () => {\n    if (window.pageYOffset > 100) {\n      setVisible(true);\n    } else {\n      setVisible(false);\n    }\n  };\n\n  const scrollTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (query === [] && null) {\n      return;\n    }\n    window.addEventListener('scroll', toggleVisibility);\n\n    return () => {\n      window.removeEventListener('scroll', toggleVisibility);\n    };\n  }, [query]);\n\n  return (\n    <>\n      {visible ? (\n        <Button type=\"button\" onClick={scrollTop}>\n          <BsFillArrowUpCircleFill size=\"100%\" color=\"rgb(255, 107, 8)\" />\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nScrollTop.propTypes = {\n  query: PropTypes.arrayOf(PropTypes.shape),\n};\n\nexport default ScrollTop;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\nconst SEARCH_URL = 'https://api.themoviedb.org/3/search/movie';\nconst BASE_DETAIL_URL = 'https://api.themoviedb.org/3/movie';\n\nconst KEY = '4cd68e7e48cde1cabd477e22c5e05053';\n\nexport const getTrending = async page => {\n  const response = await axios.get(`${BASE_URL}?api_key=${KEY}&page=${page}`);\n  return response.data;\n};\n\nexport const fetchFilm = async (query, page) => {\n  const response = await axios.get(\n    `${SEARCH_URL}?api_key=${KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}&language=en-US&`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async id => {\n  const response = await axios.get(\n    `${BASE_DETAIL_URL}/${id}/credits?api_key=${KEY}&language=en-US&`\n  );\n  return response.data.cast;\n};\n\nexport const fetshReviews = async id => {\n  const response = await axios.get(\n    `${BASE_DETAIL_URL}/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["ActorsList","styled","ActorsCard","Actor","Role","ActorImg","movieId","useParams","useState","actors","setActors","useEffect","fetchActors","then","error","console","log","map","cast_id","name","character","profile_path","src","alt","loading","height","Oscar","ScrollTop","query","Button","visible","setVisible","toggleVisibility","window","pageYOffset","addEventListener","removeEventListener","type","onClick","scrollTo","top","behavior","size","color","BASE_DETAIL_URL","KEY","getTrending","page","axios","response","data","fetchFilm","results","fetchMovieDetails","id","cast","fetshReviews"],"sourceRoot":""}